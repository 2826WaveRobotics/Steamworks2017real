// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "CANTalon.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::intakeIntakeMotor;
std::shared_ptr<DigitalInput> RobotMap::intakeFuelDetector;
std::shared_ptr<CANTalon> RobotMap::driveHopperLeft;
std::shared_ptr<CANTalon> RobotMap::driveHopperRight;
std::shared_ptr<CANTalon> RobotMap::driveIntakeLeft;
std::shared_ptr<CANTalon> RobotMap::driveIntakeRight;
std::shared_ptr<RobotDrive> RobotMap::driveRobotDrive41;
std::shared_ptr<CANTalon> RobotMap::driveHLeft;
std::shared_ptr<CANTalon> RobotMap::driveHRight;
std::shared_ptr<Encoder> RobotMap::driveLeftEncoder;
std::shared_ptr<Encoder> RobotMap::driveRightEncoder;
std::shared_ptr<Encoder> RobotMap::driveHEncoder;
std::shared_ptr<Solenoid> RobotMap::gearEjector;
std::shared_ptr<Solenoid> RobotMap::gearAcquisition;
std::shared_ptr<CANTalon> RobotMap::climbLeftClimb;
std::shared_ptr<CANTalon> RobotMap::climbRightClimb;
std::shared_ptr<Compressor> RobotMap::compressorSubsystemCompressor;
std::shared_ptr<CANTalon> RobotMap::shooterShooter;
std::shared_ptr<CANTalon> RobotMap::shooterFeeder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

std::shared_ptr<DigitalInput> RobotMap::climbClimbDetector;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    intakeIntakeMotor.reset(new CANTalon(1));
    lw->AddActuator("Intake", "IntakeMotor", intakeIntakeMotor);
    
    intakeFuelDetector.reset(new DigitalInput(0));
    lw->AddSensor("Intake", "FuelDetector", intakeFuelDetector);
    
    driveHopperLeft.reset(new CANTalon(3));
    lw->AddActuator("Drive", "HopperLeft", driveHopperLeft);
    
    driveHopperRight.reset(new CANTalon(4));
    lw->AddActuator("Drive", "HopperRight", driveHopperRight);
    
    driveIntakeLeft.reset(new CANTalon(5));
    lw->AddActuator("Drive", "IntakeLeft", driveIntakeLeft);
    
    driveIntakeRight.reset(new CANTalon(6));
    lw->AddActuator("Drive", "IntakeRight", driveIntakeRight);
    
    driveRobotDrive41.reset(new RobotDrive(driveIntakeLeft, driveHopperLeft,
              driveIntakeRight, driveHopperRight));
    
    driveRobotDrive41->SetSafetyEnabled(true);
        driveRobotDrive41->SetExpiration(0.1);
        driveRobotDrive41->SetSensitivity(0.5);
        driveRobotDrive41->SetMaxOutput(1.0);

    driveHLeft.reset(new CANTalon(1));
    lw->AddActuator("Drive", "HLeft", driveHLeft);
    
    driveHRight.reset(new CANTalon(2));
    lw->AddActuator("Drive", "HRight", driveHRight);
    
    driveLeftEncoder.reset(new Encoder(4, 5, false, Encoder::k4X));
    lw->AddSensor("Drive", "LeftEncoder", driveLeftEncoder);
    driveLeftEncoder->SetDistancePerPulse(1.0);
    driveLeftEncoder->SetPIDSourceType(PIDSourceType::kRate);
    driveRightEncoder.reset(new Encoder(6, 7, false, Encoder::k4X));
    lw->AddSensor("Drive", "RightEncoder", driveRightEncoder);
    driveRightEncoder->SetDistancePerPulse(1.0);
    driveRightEncoder->SetPIDSourceType(PIDSourceType::kRate);
    driveHEncoder.reset(new Encoder(8, 9, false, Encoder::k4X));
    lw->AddSensor("Drive", "HEncoder", driveHEncoder);
    driveHEncoder->SetDistancePerPulse(1.0);
    driveHEncoder->SetPIDSourceType(PIDSourceType::kRate);
    gearEjector.reset(new Solenoid(0, 0));
    lw->AddActuator("Gear", "Ejector", gearEjector);
    
    gearAcquisition.reset(new Solenoid(0, 1));
    lw->AddActuator("Gear", "Acquisition", gearAcquisition);
    
    climbLeftClimb.reset(new CANTalon(17));
    lw->AddActuator("Climb", "LeftClimb", climbLeftClimb);
    
    climbRightClimb.reset(new CANTalon(4));
    lw->AddActuator("Climb", "RightClimb", climbRightClimb);
    
    compressorSubsystemCompressor.reset(new Compressor(0));
    
    
    shooterShooter.reset(new CANTalon(5));
    lw->AddActuator("Shooter", "Shooter", shooterShooter);
    
    shooterFeeder.reset(new CANTalon(25));
    lw->AddActuator("Shooter", "Feeder", shooterFeeder);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    climbClimbDetector.reset(new DigitalInput(1));
       lw->AddSensor("Climb", "ClimbDetector", climbClimbDetector);
}
