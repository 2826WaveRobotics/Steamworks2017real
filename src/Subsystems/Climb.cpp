// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"


#include "Climb.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Climb::Climb() : Subsystem("Climb") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftClimb = RobotMap::climbLeftClimb;
    rightClimb = RobotMap::climbRightClimb;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    climbDetectorForward = RobotMap::climbClimbDetectorForward;
    climbDetectorBack = RobotMap::climbClimbDetectorBack;
    climbReleasePin = RobotMap::climbClimbRelease;

    rightClimb->SetInverted(true);
}

void Climb::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Climb::debugClimb(double power)
{
	leftClimb->Set(power);
	rightClimb->Set(power);
}


void Climb::RunClimb(bool go, bool override){

	double currentLeft = leftClimb->Get();
	double currentRight = rightClimb->Get();

/*	if(currentLeft > 0 && currentLeft < 1 && currentRight > 0 && currentRight < 1 && go){ //check logic
		leftClimb->Set(.5);
		rightClimb->Set(.5);
	}
	else if(override && go){
		leftClimb->Set(.5);
		rightClimb->Set(.5);
	}
	else*/ if(go){
		//if(climbDetectorForward->Get() || climbDetectorBack->Get()){ //If Sensor is not tripped continue climbing
			leftClimb->Set(1.0);
			rightClimb->Set(1.0);
		}
		else{
			leftClimb->Set(0);
			rightClimb->Set(0);
		}
//	}

//
//	else{
//		leftClimb->Set(0);
//		rightClimb->Set(0);
//	}
}

bool Climb::IsTripped(){

	std::cout<<"ClimbDetectorForward : "<<climbDetectorForward<<std::endl;

	std::cout<<"ClimbDetectorBack :"<<climbDetectorBack<<std::endl;

	if(climbDetectorForward && climbDetectorBack){
		return true;
	}
	else if(climbDetectorForward || climbDetectorBack){
		return true;
	}
	else{
		return false;
	}
}

void Climb::ReleaseClimber(bool release)
{
	climbReleasePin->Set(release);
}

