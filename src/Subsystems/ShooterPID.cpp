// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"


#include "ShooterPID.h"
#include "../RobotMap.h"
#include "../OI.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS


ShooterPID::ShooterPID() : PIDSubsystem("ShooterPID", 0.0, 0.0, 0.0) {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	  shooterRight = RobotMap::shooterShooterRight;
	    shooterLeft = RobotMap::shooterShooterLeft;
	    feeder = RobotMap::shooterFeeder;
//    leftEncoder = RobotMap::driveLeftEncoder;
//    rightEncoder = RobotMap::driveRightEncoder;
//    hEncoder = RobotMap::driveHEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //hopperLeft->SetEncPosition();
    shooterRight->ConfigEncoderCodesPerRev(12);
    shooterRight->ConfigPeakOutputVoltage(1.0, -1.0);

    m_setRPM = 0;
}

void ShooterPID::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void ShooterPID::SetShooterSpeed(double RPM){
	shooterRight->EnableControl();
	shooterRight->Set(RPM);
	//shooterLeft->Set(RPM);
	m_setRPM = RPM;

}

//void ShooterPID::UpdateSecondary(){
//	shooterLeft->Set(shooterRight->Get());
//	std::cout << "ShooterPID Output:" << shooterRight->Get() << std::cout;
//}

void ShooterPID::KillShooterSpeed(){
	shooterLeft->Set(0);
	shooterRight->Set(0);
}

void ShooterPID::PrintShooterRPM(){
	std::cout<<"ShooterPID RPM "<<shooterRight->GetEncVel() << "   " << shooterRight->GetSetpoint()<<std::endl;
}

void ShooterPID::Fire_smiley(){
	double RPMError = m_setRPM * .01;
	if(shooterRight->GetEncVel() > (m_setRPM - RPMError)){
		feeder->Set(.5);
	}
	else{
		StopFeeder();
	}
}

void ShooterPID::StopFeeder(){
	feeder->Set(0);
}

void ShooterPID::StartFeeder(){
	feeder->Set(.5);
}


void ShooterPID::ResetEncoder(){
	shooterRight->Reset();
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

