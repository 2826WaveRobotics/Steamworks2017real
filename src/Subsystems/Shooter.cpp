// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"


#include "Shooter.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() : Subsystem("Shooter") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    shooter = RobotMap::shooterShooter;
    feeder = RobotMap::shooterFeeder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    shooter->SetFeedbackDevice(CANTalon::QuadEncoder);
    shooter->ConfigEncoderCodesPerRev(12);
    shooter->SetF(0);
    shooter->SetP(0);
    shooter->SetI(0);
    shooter->SetD(0);
    shooter->SetControlMode(frc::CANSpeedController::kSpeed);
    shooter->Set(0);
    m_setRPM = 0;

}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Shooter::SetShooterSpeed(double RPM){ //this does not work. it's probably because we need to make the PID work to make this work right :)
	shooter->Set(RPM);
	m_setRPM = RPM;
}

void Shooter::PrintShooterRPM(){
	std::cout<<"Shooter RPM "<<shooter->GetEncVel()<<std::endl;
}

void Shooter::Fire_smiley(){
	double RPMError = m_setRPM * .01;
	if(shooter->GetEncVel() > (m_setRPM - RPMError)){
		feeder->Set(.5);
	}
	else{
		StopFeeder();
	}
}

void Shooter::StopFeeder(){
	feeder->Set(0);
}

void Shooter::StartFeeder(){
	feeder->Set(.5);
}
