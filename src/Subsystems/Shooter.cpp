// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"


#include "Shooter.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() : Subsystem("Shooter") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    shooterRight = RobotMap::shooterShooterRight;
    shooterLeft = RobotMap::shooterShooterLeft;
    feeder = RobotMap::shooterFeeder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //shooterEncoder = RobotMap::shooterShooterEncoder;

    shooterRight->SetControlMode(frc::CANSpeedController::kSpeed); //kPercentVbus works
    shooterRight->SetFeedbackDevice(CANTalon::QuadEncoder);
    shooterRight->ConfigEncoderCodesPerRev(12); //real robot: 12
    shooterRight->ConfigNominalOutputVoltage(0.1, -0.1);
    shooterRight->ConfigMaxOutputVoltage(12);
    shooterRight->SetF(.45);
    shooterRight->SetP(0.5);
    shooterRight->SetI(0);
    shooterRight->SetD(0);
    //shooterRight->SetIzone(20); //20 RPM

    shooterRight->Set(0);

    //set Left shooter motor to follow the output of the Right shooter motor
   shooterLeft->SetControlMode(frc::CANSpeedController::kFollower);
   shooterLeft->SetInverted(true);
   shooterLeft->Set((RobotMap::shooterRightCANId));

    m_setRPM = 0;

}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Shooter::SetShooterSpeed(double RPM){

	double speedCalc = (RPM * 12);
	//shooterRight->EnableControl();
	//shooterRight->Disable();
	if (m_setRPM != RPM){
	shooterRight->Set(speedCalc);
//	shooterRight->Set(shooterRight->GetSetpoint());
	//shooterRight->GetClosedLoopError();
	shooterRight->EnableControl();
	//shooterLeft->Set(RPM);
	m_setRPM = RPM;
	}

}

void Shooter::UpdateSecondary(){
	 shooterLeft->Set((RobotMap::shooterRightCANId));
//	shooterLeft->Set(shooterRight->Get()*4);
	//std::cout << "Shooter Output:" << shooterRight->Get() << std::cout;
}

void Shooter::KillShooterSpeed(){
	shooterLeft->Set(0);
	shooterRight->Set(0);
}

void Shooter::PrintShooterRPM(){
	std::cout<<"Shooter RPM "<<shooterRight->GetEncVel() << " Setpoint:  " << shooterRight->GetSetpoint()
			<< " GetSpeed:  " << shooterRight->GetSpeed() << " Speed: " << shooterRight->Get()*4
			<< std::endl;
}

void Shooter::Fire_smiley(){
	double RPMError = m_setRPM * .01;
	if(shooterRight->GetEncVel() > (m_setRPM - RPMError)){
		feeder->Set(.5);
	}
	else{
		StopFeeder();
	}
}

void Shooter::StopFeeder(){
	feeder->Set(0);
}

void Shooter::StartFeeder(){
	feeder->Set(.5);
}

