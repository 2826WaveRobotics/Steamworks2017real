// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/ZTemplate.h"
#include "Commands/ZTemplateGroup.h"


// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

#include "Commands/ClimbCommand.h"
#include "Commands/SetFeederOn.h"
#include "Commands/SetIntakeOn.h"
#include "Commands/SetShooterSpeed.h"
#include "Commands/GearEject.h"
#include "Commands/GearUneject.h"
#include "Commands/PlateClosed.h"
#include "Commands/PlateOpen.h"
#include "Commands/FeetDeploy.h"
#include "Commands/FeetRetract.h"

OI::OI() {
	// Process operator interface input here.
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	operatorJoystick.reset(new Joystick(1));

	operatorRightTrigger.reset(new Joystick(3));
	operatorLeftTrigger.reset(new Joystick(2));

	operatorStart.reset(new JoystickButton(operatorJoystick.get(), 8));
	operatorSelect.reset(new JoystickButton(operatorJoystick.get(), 7));
	operatorRightBumper.reset(new JoystickButton(operatorJoystick.get(), 6));
	operatorLeftBumper.reset(new JoystickButton(operatorJoystick.get(), 5));
	operatorY.reset(new JoystickButton(operatorJoystick.get(), 4));
	operatorX.reset(new JoystickButton(operatorJoystick.get(), 3));
	operatorB.reset(new JoystickButton(operatorJoystick.get(), 2));
	operatorA.reset(new JoystickButton(operatorJoystick.get(), 1));

	operatorY->WhileHeld(new SetShooterSpeed(500));
	operatorX->WhileHeld(new GearUneject());
	operatorB->WhileHeld(new PlateClosed());
	operatorA->WhileHeld(new PlateOpen());
	operatorStart->WhileHeld(new FeetDeploy());
	operatorSelect->WhileHeld(new FeetRetract());


	driverJoystick.reset(new Joystick(0));

	driverRightTrigger.reset(new Joystick(3));
	driverLeftTrigger.reset(new Joystick(2));

	driverStart.reset(new JoystickButton(driverJoystick.get(), 8));
	driverSelect.reset(new JoystickButton(driverJoystick.get(), 7));
	driverRightBumper.reset(new JoystickButton(driverJoystick.get(), 6));
	driverLeftBumper.reset(new JoystickButton(driverJoystick.get(), 5));
	driverY.reset(new JoystickButton(driverJoystick.get(), 4));
	driverX.reset(new JoystickButton(driverJoystick.get(), 3));
	driverB.reset(new JoystickButton(driverJoystick.get(), 2));
	driverA.reset(new JoystickButton(driverJoystick.get(), 1));

	// SmartDashboard Buttons
	SmartDashboard::PutData("ZTemplateGroup", new ZTemplateGroup());
	SmartDashboard::PutData("ZTemplate", new ZTemplate());
	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getOperatorJoystick() {
	return operatorJoystick;
}

std::shared_ptr<Joystick> OI::getDriverJoystick() {
	return driverJoystick;
}


// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
