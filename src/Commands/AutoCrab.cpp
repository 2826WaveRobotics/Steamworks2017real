// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoCrab.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR


//see point
//h  until x value is 0
//arcade w/ turn until we reach point

AutoCrab::AutoCrab(double distance, double turn, double power, double seconds): Command() {
	Requires(Robot::drivePID.get());
	// Use requires() here to declare subsystem dependencies
	// eg. requires(Robot::chassis.get());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	m_distance = distance;
	m_heading = turn;
	m_power = power;
	m_distanceTraveled = 0;

	SetTimeout(seconds);
	//RobotMap::driveHEncoder->Reset();

}

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutoCrab::Initialize() {
	//	Robot::drivePID->ResetEncoders(); //makes robot spin around
	//	Robot::drivePID->ZeroYaw();
	if (NULL == Robot::drivePID){
		std::cout << "man it is NULL" << std::cout;
	}


	Robot::drivePID->SetPIDs(c_crabP, c_crabI, c_crabD);

	Robot::drivePID->SetHPower(m_power);
	Robot::drivePID->ArcadeDrive(0, -.325, m_heading);
	Robot::drivePID->ZeroYaw();
	//Robot::drivePID->DriveStraight(0.1, m_heading );
}

// Called repeatedly when this Command is scheduled to run
void AutoCrab::Execute() {

	Robot::drivePID->SetHPower(m_power); //power = -1

	if(m_power < 0){
		Robot::drivePID->ArcadeDrive(0, -.325, m_heading);
	}
	else if(m_power > 0){
		Robot::drivePID->ArcadeDrive(0, .325, m_heading);
	}
	//	Robot::drivePID->DriveStraight(0.1, m_heading );

	m_distanceTraveled = Robot::drivePID->GetHEncoder();
	//m_distanceTraveled = abs(RobotMap::driveHEncoder->Get());
	std::cout << " Distance Traveled: " << m_distanceTraveled << " Set Distance: " << m_distance << std::endl;
}

// Make this return true when this Command no longer needs to run execute()
bool AutoCrab::IsFinished() {
	//Check to see if encoder reads that we've traveled the distance
	//

	if(m_power > 0 && m_distanceTraveled > m_distance ){
		std::cout << " ---------------------- Is Finished  - FIRST condition true ---------------" << std::endl;
		return true;
	}
	else if(m_power < 0 && m_distanceTraveled < m_distance){
		std::cout << " ---------------------- Is Finished  - SECOND condition true ---------------" << std::endl;
		return true;
	}

	else if(m_power == 0){
		std::cout << " ---------------------- Is Finished  - THIRD condition true ---------------" << std::endl;
		return true;
	}
	else if(IsTimedOut())
	{
		return true;
	}
	else{
		return false;
	}
	//	if (Robot::drivePID->GetHEncoder() > m_distance){
	//		 std::cout << " --------------- RETURNED TRUE WOWZA -------------------" << std::endl;
	//		return true;
	//	}
	//	else{
	//		 std::cout << " --------------- RETURNED FALSE wow what a loser -------------------" << std::endl;
	//		return false;
	//	}
}

// Called once after isFinished returns true
void AutoCrab::End() {

	Robot::drivePID->SetHPower(0);
	Robot::drivePID->ArcadeDrive(0, 0, m_heading);

	//Robot::drivePID->SetSidePower(0, 0, 0, false);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoCrab::Interrupted() {

}
