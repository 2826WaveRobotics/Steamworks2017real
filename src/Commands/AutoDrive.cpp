// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoDrive.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoDrive::AutoDrive(double distance, double heading, double power): Command() {
	Requires(Robot::drivePID.get());
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	m_distance = distance;
	m_heading = heading + c_calibrationValue;
	m_power = power;
	m_distanceTraveled = 0;
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutoDrive::Initialize() {
	std::cout << " Auto Drive Init .. " << std::endl;
	//Robot::drivePID->ResetEncoders();
	//RobotMap::driveIntakeRight->SetEncPosition(0);
	std::cout << " 1 .." << std::endl;
	if (NULL == Robot::drivePID){
		std::cout << "man it is NULL" << std::cout;
	}
	std::cout << " 2 .." << std::endl;
	Robot::drivePID->SetPIDs(c_straightP, c_straightI, c_straightD);
	std::cout << " 3 .." << std::endl;
	Robot::drivePID->DriveStraight(m_power, m_heading);
	std::cout << " Done" << std::endl;
}

// Called repeatedly when this Command is scheduled to run
void AutoDrive::Execute() {
	std::cout << " Auto Drive Execute _-------------------------" << std::endl;
	Robot::drivePID->DriveStraight(m_power, m_heading );
	m_distanceTraveled = Robot::drivePID->GetRightEncoder();
	std::cout << " Distance Traveled: " << m_distanceTraveled << " Set Distance: " << m_distance << std::endl;
}

// Make this return true when this Command no longer needs to run execute()
bool AutoDrive::IsFinished() {
	//Check to see if encoder reads that we've traveled the distance
//
	if((m_power > 0) && (m_distanceTraveled > m_distance)){
		std::cout << " ---------------------------- True on first condition ------------" << std::endl;
		return true;
	}
	else if((m_power < 0) && (m_distanceTraveled < m_distance)){
		 std::cout << " ----------------------- True on second condition ------------" << std::endl;
		return true;
	}

	else if(m_power == 0){
		 std::cout << " ----------------------- True on third condition ------------" << std::endl;
			return true;
	}
	else{
			return false;
	}
////	if (Robot::drivePID->GetLeftEncoder() > m_distance && Robot::drivePID->GetRightEncoder() > m_distance){
////		return true;
////	}
//
   //return false;
}

// Called once after isFinished returns true
void AutoDrive::End() {
	Robot::drivePID->SetSidePower(0, 0, 0, false);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoDrive::Interrupted() {

}
