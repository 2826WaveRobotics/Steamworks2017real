// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoCurve.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoCurve::AutoCurve(double xDist, double yDist, double heading): Command() {
	Requires(Robot::drivePID.get());
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	m_xDist = xDist;
	m_setHeading = heading;
	m_yDist = yDist;
	m_xDistTraveled = 0;
	m_yDistTraveled = 0;
	m_newHeading = 0;
	m_lastHeading = 0;

	m_newX = 0;
	m_newY = 0;
	m_lastX = 0;
	m_lastY = 0;
	//m_initialHeading = 0;
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutoCurve::Initialize() {
	//std::cout << " Auto Drive Initialize _-------------------------" << std::endl;
	//Robot::drivePID->ResetEncoders();
	if (NULL == Robot::drivePID){
		std::cout << "man it is NULL" << std::cout;
	}

	m_newHeading = Robot::drivePID->GetYaw();
	m_newX = Robot::drivePID->GetHEncoder();
	m_newY = (abs(Robot::drivePID->GetLeftEncoder()) + abs(Robot::drivePID->GetRightEncoder()))/2;

	std::cout << " New Heading: " << m_newHeading << " New X: " << m_newX << " New Y: " << m_newY;

	//Robot::drivePID->SetDirection(m_heading);
//	Robot::drivePID->DriveStraight(1, m_setHeading);
//	Robot::drivePID->SetHPower(1);

}

// Called repeatedly when this Command is scheduled to run
void AutoCurve::Execute() {
	//std::cout << " Auto Drive Execute _-------------------------" << std::endl;

//	m_xDistTraveled = Robot::drivePID->GetHEncoder();
//	m_yDistTraveled = (abs(Robot::drivePID->GetLeftEncoder()) + abs(Robot::drivePID->GetRightEncoder()))/2;


//	Robot::drivePID->DriveStraight(1, m_setHeading);
//	Robot::drivePID->SetHPower(1);

	double aveHeading =  ((m_lastHeading + m_newHeading) / 2); //depends on cycle speed
	double xDif = m_newX - m_lastX;
	double yDif = m_newY - m_lastY;

	double deltaX = (xDif * (cos(aveHeading)) + yDif * (sin(aveHeading)));
	double deltaY = (yDif * (cos(aveHeading)) + xDif * (cos(aveHeading)));

	//TO DO: cout statements for variables
	//TO DO: motor calcs


	//std::cout << " Distance Traveled: " << m_distanceTraveled << " Set X Distance: " << m_xDist <<" Set Y Distance:"  << m_yDist << std::endl;
	m_lastHeading = Robot::drivePID->GetYaw();
	m_lastX = Robot::drivePID->GetHEncoder();
	m_lastY = (abs(Robot::drivePID->GetLeftEncoder()) + abs(Robot::drivePID->GetRightEncoder()))/2;

	std::cout << " Average Heading: " << aveHeading << " X Diff: " << xDif << " Y Diff: " << yDif << " Delta X: " << deltaX
			<< " Delta Y: " << deltaY << " Last Heading: " << m_lastHeading << " Last X: " << m_lastX << " Last Y: "
			<< m_lastY << std::endl;
}

// Make this return true when this Command no longer needs to run execute()
bool AutoCurve::IsFinished() {
	//Check to see if encoder reads that we've traveled the distance
//
//	if(m_distanceTraveled > m_distance){
//		return true;
//	}
//	else if( m_distanceTraveled > m_distance){
//			return true;
//	}
//
//	else if(m_power == 0){
//			return true;
//	}
//	else{
//			return false;
//	}
////	if (Robot::drivePID->GetLeftEncoder() > m_distance && Robot::drivePID->GetRightEncoder() > m_distance){
////		return true;
////	}
//
   return false;
}

// Called once after isFinished returns true
void AutoCurve::End() {
	//Robot::drivePID->DriveStraight(0, m_heading);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoCurve::Interrupted() {

}
