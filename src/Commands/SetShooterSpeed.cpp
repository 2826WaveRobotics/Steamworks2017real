// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "SetShooterSpeed.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

SetShooterSpeed::SetShooterSpeed(double RPM, double seconds): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
	Requires(Robot::shooter.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	m_newSpeed = RPM;
	SetTimeout(seconds);

}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void SetShooterSpeed::Initialize() {
	if(m_newSpeed == 0){
		Robot::shooter.get()->SetPIDValues(0, 0, 0);
	}
//	/else if(m_newSpeed = 1257)
	else{
		Robot::shooter.get()->SetPIDValues(4.75, 0.00000000000000000001 , 2560);
	}
}

// Called repeatedly when this Command is scheduled to run
void SetShooterSpeed::Execute() {
	Robot::shooter.get()->SetShooterSpeed(m_newSpeed);
	Robot::shooter.get()->UpdateSecondary();
}

// Make this return true when this Command no longer needs to run execute()
bool SetShooterSpeed::IsFinished() {
	 if(IsTimedOut())
				 {
				            return true;
				 }
			return false;

}

// Called once after isFinished returns true
void SetShooterSpeed::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SetShooterSpeed::Interrupted() {

}
